Sure! Here's a simple, **non-technical, plain-text guide** you can give to an AI to help with your **Speakle** project:

---

**Project Name:** Speakle
**Project Type:** Web Application
**Goal:** Build a website where people can sign up, find language exchange partners, and talk to each other through video chat.

---

### üß© What the Website Should Do:

1. **User Registration and Login**

   * People should be able to create an account with their basic info, languages they know, and languages they want to learn.
   * They should be able to log in and log out.

2. **User Profiles**

   * Each user has a profile with a bio, a profile picture, their native language, the language they are learning, how well they speak it, and their interests.

3. **Finding Language Partners (Matching)**

   * The website should help users find others who speak the language they want to learn and want to learn the language they speak.

4. **Video Chat**

   * After finding a match, users should be able to enter a video chat room to talk.
   * The video chat works directly in the browser using WebRTC technology.
   * Each match gets its own secure video room that only the matched users can access.

5. **Room System**

   * A unique room is created for each conversation between matched partners.
   * The room should only be accessible by the matched users.
   * Call history and session data should be stored for user analytics.

---

### üõ†Ô∏è Tools to Use:

* Use Django for the website's backend, pages, and real-time communication.
* Use Django Channels for WebSocket support (enables real-time video chat signaling).
* Use HTML, CSS, JS, TailwindCSS for the frontend.
* Use modern JavaScript with WebRTC APIs for video/audio communication.
* Use Redis as the channel layer backend for Django Channels (for scaling WebSocket connections).

---

### üìå Important Notes:

* Don't use Django REST Framework or APIs for the main functionality.
* Don't use React or Vue - keep frontend simple with vanilla JavaScript.
* Don't use separate Node.js servers - everything should run through Django.
* Keep everything simple and server-rendered with Django templates.
* All user info, matching, and video room management should be handled in Django.
* Use Django Channels for WebSocket connections that handle video chat signaling.
* The video chat should work using WebRTC with Django Channels managing the peer connections.
* Store video call sessions and analytics in Django models for future features.

---

### üîß Technical Architecture:

* **Frontend**: HTML templates + TailwindCSS + Vanilla JavaScript + WebRTC
* **Backend**: Django + Django Channels for WebSocket support
* **Database**: SQLite (development) / PostgreSQL (production)
* **Real-time**: Django Channels with Redis channel layer
* **Video/Audio**: Browser WebRTC APIs (no external services needed)

---
